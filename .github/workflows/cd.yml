##
## =====================================================================================
##  C O P Y R I G H T
## -------------------------------------------------------------------------------------
##  Copyright (c) 2022 by Robert Bosch GmbH. All rights reserved.
##
##  Author(s):
##  - Markus Braun, :em engineering methods AG (contracted by Robert Bosch GmbH)
## =====================================================================================
##

name: CD

on:
  release:
    types: [published]

env:
  python-version: 3.9

jobs:
  # we can safely assume that setup was done before by
  checkout:
    runs-on: [ self-hosted ]
    steps:
    - name: "checkout code"
      uses: actions/checkout@v2
      with:
        submodules: false
        fetch-depth: 0
        token: ${{ secrets.GITHUBTOKEN }}

  setup:
    runs-on: [ self-hosted ]
    needs: [ checkout ]
    steps:
      # until gh composite actions are working as expected or we've got ghes 3.5 where caching is working
      # we need to repeat these two steps over and over again :-(
      - name: "setup python"
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: "setup poetry"
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: "install dependencies"
        run: |
          poetry install

      - name: get version
        run: |
          echo "SEMANTIC_VERSION=$(poetry version -s)" >> $GITHUB_ENV
    outputs:
      semantic_version: ${{ env.SEMANTIC_VERSION }}

  pypi:
    runs-on: [ self-hosted ]
    needs: [ setup ]
    steps:
      # until gh composite actions are working as expected or we've got ghes 3.5 where caching is working
      # we need to repeat these two steps over and over again :-(
      - name: "setup python"
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: "setup poetry"
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: "build pypi package"
        run: |
          poetry build

      - name: "deploy to pypi repository"
        run: |
          # TODO: Configure
          poetry publish
        env:

  pex:
    runs-on: [ self-hosted ]
    needs: [ setup ]
    steps:
      # until gh composite actions are working as expected or we've got ghes 3.5 where caching is working
      # we need to repeat these two steps over and over again :-(
      - name: "setup python"
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: "setup poetry"
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: "build pex package"
        run: |
          (rm -rf .pex_tmp || true)
          mkdir .pex_tmp
          cp -R doxysphinx .pex_tmp
          poetry export -f requirements.txt --without-hashes -o .requirements.txt
          poetry run pex --requirement=.requirements.txt --entry-point doxysphinx.cli:cli --sources-directory=.pex_tmp --output-file=dist/doxysphinx.pex

  deploy:
    runs-on: [ self-hosted ]
    needs: [ pex, pypi, setup ]
    steps:

    # upload created binaries (Note: as semantic-release publish seems to delete the dist folder we have to copy
    # the binaries to .package/ inside the semantic-release inner buildcommand - see pyproject.toml)
    - name: Upload binaries to gh-release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ needs.setup.outputs.semantic_version }}"
        token: ${{ secrets.GITHUBTOKEN }}
        files: |
          dist/*.*

  documentation:
    needs: [ setup ]
    runs-on: [ self-hosted ]
    steps:
    # we need to ensure that python and poetry is correctly set up for each job (therefore we need to repeat it here...)
    - name: "setup python"
      id: setup-python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.python-version }}

    - name: "setup poetry"
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: "cleanup docs"
      run: make clean

    - name: "doxygen"
      run: make doxygen

    - name: "doxysphinx"
      run: make doxysphinx

    - name: "sphinx"
      run: make sphinx

    - name: "upload documentation as artifact"
      uses: actions/upload-artifact@v2
      with:
        name: Project documentation
        path: ${{ github.workspace }}/.build/html

    - name: "publish documentation on gh-pages"
      uses: peaceiris/actions-gh-pages@v3
      with:
          github_token: ${{ secrets.GITHUBTOKEN }}
           # Action doesnt take default working-directory into account
          publish_dir: ${{ github.workspace }}/.build/html
